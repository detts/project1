@isTest
public class MonthlyBudgetTesting {
    //Creates a list of all budgets so they can be inserted collectively.
	static List<Monthly_Budget__c> validBudgets = new List<Monthly_Budget__c>();
    //Creates a list of all budgets so they can fail collectively.
    static List<Monthly_Budget__c> invalidBudgets = new List<Monthly_Budget__c>();
    
	@testSetup
	public static void BudgetTestSetup()
    {
        //CREATES DATA THAT SHOULD BE VALID AND CAN BE USED TO TEST ALL VALID CASES.
        
        //Emulates a monthly budget which is auto-generated by a transaction.
        Monthly_Budget__c instantMonthlyBudget = new Monthly_Budget__c();
        instantMonthlyBudget.Name = 'TestBudget - June 2020';
        instantMonthlyBudget.YearValue__c = 2020;
        instantMonthlyBudget.Month_Value__c = 6;
        instantMonthlyBudget.budgetedExpense__c = 'Composite';
        instantMonthlyBudget.OwnerId = userInfo.getUserId();
        instantMonthlyBudget.Recorded_Expenses__c = 0;
        //Emulates a subordinate monthly budget defined by the system.
        Monthly_Budget__c firstSubMonthlyBudget = new Monthly_Budget__c();
        firstSubMonthlyBudget.Name = 'TestSubBudget 1 - June 2020';
        firstSubMonthlyBudget.YearValue__c = 2020;
        firstSubMonthlyBudget.Month_Value__c = 6;
        firstSubMonthlyBudget.budgetedExpense__c = 'Subscriptions';
        firstSubMonthlyBudget.OwnerId = userInfo.getUserId();
        firstSubMonthlyBudget.Recorded_Expenses__c = 50;
        //Emulates a second system-defined subordinate monthly budget, used to make sure the budget iterates through them all to update.
        Monthly_Budget__c secondSubMonthlyBudget = new Monthly_Budget__c();
        secondSubMonthlyBudget.Name = 'TestSubBudget 2 - June 2020';
        secondSubMonthlyBudget.YearValue__c = 2020;
        secondSubMonthlyBudget.Month_Value__c = 6;
        secondSubMonthlyBudget.budgetedExpense__c = 'Food&Drinks';
        secondSubMonthlyBudget.OwnerId = userInfo.getUserId();
        secondSubMonthlyBudget.Recorded_Expenses__c = 50;
        //Emulates a valid Subordinate Monthly Budget entered by a user, which causes a composite Budget to automatically be generated before it..
        Monthly_Budget__c userChainingBudgets = new Monthly_Budget__c();
        userChainingBudgets.Name = 'TestSubBudget ChainDefining - June 2021';
        userChainingBudgets.YearBudgeted__c = '2021';
        userChainingBudgets.Budgeted_Month__c = 'June';
        userChainingBudgets.budgetedExpense__c = 'Food&Drinks';
        userChainingBudgets.OwnerId = userInfo.getUserId();
        userChainingBudgets.Recorded_Expenses__c = 0;
        //
        Monthly_Budget__c anonymousTypedBudget = new Monthly_Budget__c();
        anonymousTypedBudget.YearValue__c = 2024;
        anonymousTypedBudget.Month_Value__c = 6;
        anonymousTypedBudget.OwnerId = userInfo.getUserId();
        anonymousTypedBudget.Recorded_Expenses__c = 0;
        //
        validBudgets.add(instantMonthlyBudget);
        validBudgets.add(firstSubMonthlyBudget);
        validBudgets.add(secondSubMonthlyBudget);
        validBudgets.add(userChainingBudgets);
        validBudgets.add(anonymousTypedBudget);
        
        //CREATES DATA THAT SHOULD BE INVALID AND SHOULD THROW AN ERROR.
        
        //Emulates a budget with no Date Whatsoever
        Monthly_Budget__c noDateBudget = new Monthly_Budget__c();
        noDateBudget.budgetedExpense__c = 'Composite';
        noDateBudget.OwnerId = userInfo.getUserId();
        noDateBudget.Recorded_Expenses__c = 0;
        //Attempts to create an identical budget out of a previously made budget (instantMonthlyBudget).
        Monthly_Budget__c duplicateBudget = new Monthly_Budget__c();
        duplicateBudget.YearValue__c = 2020;
        duplicateBudget.Month_Value__c = 6;
        duplicateBudget.budgetedExpense__c = 'Composite';
        duplicateBudget.OwnerId = userInfo.getUserId();
        duplicateBudget.Recorded_Expenses__c = 0;
        //
        Monthly_Budget__c duplicateBudgetTwo = new Monthly_Budget__c();
        duplicateBudgetTwo.YearValue__c = 2020;
        duplicateBudgetTwo.Month_Value__c = 6;
        duplicateBudgetTwo.budgetedExpense__c = 'Composite';
        duplicateBudgetTwo.OwnerId = userInfo.getUserId();
        duplicateBudgetTwo.Recorded_Expenses__c = 0;
        //
        invalidBudgets.add(noDateBudget);
        invalidBudgets.add(duplicateBudget);
        invalidBudgets.add(duplicateBudgetTwo);
    }
    
    @isTest
    public static void testValidBudgets()
    {
        BudgetTestSetup();
        List<Monthly_Budget__c> isolatedValidBudgets = new List<Monthly_Budget__c>();
        boolean inDB = false;
        for(integer i = 0; i < validBudgets.size(); i++)
        {
            isolatedValidBudgets.clear();
            isolatedValidBudgets.add(validBudgets[i]);
            insert isolatedValidBudgets;
            List<Monthly_Budget__c> currentBudgets = new List<Monthly_Budget__c>([SELECT Budgeted_Month__c, YearBudgeted__c, YearValue__c, Month_Value__c, RecordedIncome__c, budgetedExpense__c, OwnerId, Id FROM Monthly_Budget__c]);
            for(integer j = 0; j < currentBudgets.Size(); j++)
            {
                if( (currentBudgets[j].budgetedExpense__c == validBudgets[i].budgetedExpense__c) && (currentBudgets[j].YearValue__c == validBudgets[i].YearValue__c) && (currentBudgets[j].Month_Value__c == validBudgets[i].YearValue__c) )
                {
                   //then this budget was successfully entered into the database.
                   inDB = true;
                }
                else if( (currentBudgets[j].YearValue__c == validBudgets[i].YearValue__c) && (currentBudgets[j].Month_Value__c == validBudgets[i].YearValue__c) )
                {
                    if(currentBudgets[j].budgetedExpense__c == 'Composite' && validBudgets[i].budgetedExpense__c == null)
                    {
                        //Checks for anonymous typed case.
                        inDB = true;
                    }
                }
            }
        	//if we get out of the for loop without returning true, then it must be false.
            System.assert(inDB);
        }
    }
    
    @isTest
    public static void testInvalidBudgets()
    {
        BudgetTestSetup();
        List<Monthly_Budget__c> isolatedInvalidBudgets = new List<Monthly_Budget__c>();
        for(integer i = 0; i < invalidBudgets.size(); i++)
        {
            isolatedInvalidBudgets.clear();
            isolatedInvalidBudgets.add(invalidBudgets[i]);
            System.debug('invalid budget: ' + invalidBudgets[i]);
            try{
                insert isolatedInvalidBudgets;
            }catch(exception e)
            {
                System.debug('Found error "'+ e.getMessage() + '" at line ' + e.getLineNumber() + '.');
                switch on i
                {
                    when 0 { System.assert( 'A Month or year value wes not chosen before trying to create the Budget.'.equals( e.getMessage() ) ); }
                    when 1 { /*Nothing asserted here because it is a valid entry */ }
                    when 2 { System.assert( 'This budget already exists.'.equals( e.getMessage() ) ); }
                }
            }
        }
    }
}
